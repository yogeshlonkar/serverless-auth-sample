service: sample-streaming-service

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: __offline__/migrations

provider:
  name: aws
  region: ap-south-1
  stage: dev
  runtime: nodejs8.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - __*/**
    - .*/**
    - jsconfig.json
    - event.json

functions:
  create-metada:
    handler: src/handlers/metadataHandler.createMetadata
    events:
      - http:
          path: /metadata/{id}
          method: post
          cors: true
          request:
            parameters:
              paths:
                id: true
  get-metadata:
    handler: src/handlers/metadataHandler.getMetadata
    events:
      - http:
          path: /metadata/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

